---
- name: Ubuntu Desktop Setup with Packages and Configuration
  hosts: localhost
  connection: local



  vars:
    buildessentials:
      - wget
      - curl
      - gpg
      - ca-certificates
      - apt-transport-https
      - software-properties-common
      - python3-pip
      - virtualenv
      - python3-setuptools

    packages:
      - tmux
      - neovim
      - nmap
      - curl
      - bat
      - fail2ban
      - bat
      - tor
      - zsh
      #- zsh-syntax-highlighting
      #- zsh-autosuggestions
      - regolith-desktop
      - regolith-session-flashback
      - regolith-look-lascaille
      - regolith-look-ayu-dark
      - i3xrocks-battery
      - i3xrocks-volume
      - i3xrocks-cpu-usage
      - i3xrocks-memory
      - i3xrocks-microphone
      - code
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-compose-plugin
      - docker-buildx-plugin

    oh_my_zsh_dir: "{{ ansible_env.HOME }}/.oh-my-zsh"
    zsh_plugins_dir: "{{ ansible_env.HOME }}/.oh-my-zsh/custom/plugins"






  tasks:
    - name: Install buildessentials
      become: yes
      apt:
        name: "{{ buildessentials }}"
        state: present
        update_cache: yes
      tags: buildessentials


    - name: Install aptitude
      become: yes
      apt:
        name: aptitude
        state: latest
        update_cache: true


### DOCKER
    - name: Check if Docker repository exists
      stat:
        path: /etc/apt/sources.list.d/docker.list
      register: docker_status

    - name: Create Docker GPG key directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      when: not docker_status.stat.exists

    - name: Download Docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'
      when: not docker_status.stat.exists

    - name: Add Docker repository
      apt_repository:
        repo: >-
          deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc]
          https://download.docker.com/linux/ubuntu
          {{ ansible_distribution_release }} stable
        filename: docker
        update_cache: yes
      when: not docker_status.stat.exists


### VSCODE
    - name: VSCode key add
      become: yes
      block:
        - name: Check if VS Code repository exists
          stat:
            path: /etc/apt/sources.list.d/packages_microsoft_com_repos_code.list
          register: vscode_status

        - name: VSCode | add key
          ansible.builtin.get_url:
            url: https://packages.microsoft.com/keys/microsoft.asc
            dest: /etc/apt/keyrings/microsoft.asc
          when: not vscode_status.stat.exists 
            
        - name: VSCode | apt source
          ansible.builtin.apt_repository:
            repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/microsoft.asc] https://packages.microsoft.com/repos/code stable main"
            state: present
            filename: vscode
          when: not vscode_status.stat.exists 


### REGOLITH
    - name: Regolith key add
      become: yes
      block:
        - name: Check if regolith repository exists
          stat:
            path: /etc/apt/sources.list.d/regolith.list 
          register: regolith_status

        - name: regolith | download and convert key
          block:
            - name: regolith | add key
              ansible.builtin.get_url:
                url: https://archive.regolith-desktop.com/regolith.key
                dest: /usr/share/keyrings/regolith-archive-keyring.gpg
                mode: '0644'
              register: regolith_key

            - name: regolith | convert key to GPG format
              ansible.builtin.command: >
                gpg --dearmor /usr/share/keyrings/regolith-archive-keyring.gpg
              args:
                creates: /usr/share/keyrings/regolith-archive-keyring.gpg
              when: regolith_key.changed
          when: not regolith_status.stat.exists

        - name: regolith | add apt repository
          ansible.builtin.apt_repository:
            repo: >-
              deb [arch=amd64 signed-by=/usr/share/keyrings/regolith-archive-keyring.gpg]
              https://archive.regolith-desktop.com/ubuntu/stable
              noble v3.2
            filename: regolith
            state: present
          when: not regolith_status.stat.exists




### INSTALL PACKAGES FROM APT

    - name: Update apt cache and install required packages
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      tags: packages
      become: yes








## Oh-my-zsh config

    - name: Set zsh as default shell
      user:
        name: "{{ ansible_user_id }}"
        shell: /usr/bin/zsh
      tags: zsh

    - name: Check if Oh My Zsh is already installed
      stat:
        path: "{{ oh_my_zsh_dir }}/.git"
      register: ohmyzsh_git

    - name: Install Oh My Zsh
      git:
        repo: https://github.com/ohmyzsh/ohmyzsh.git
        dest: "{{ oh_my_zsh_dir }}"
        update: yes
      when: not ohmyzsh_git.stat.exists
      tags: ohmyzsh

    - name: Ensure plugins directory exists
      file:
        path: "{{ zsh_plugins_dir }}"
        state: directory
      tags: zsh_plugins

    - name: Install zsh-autosuggestions plugin
      git:
        repo: https://github.com/zsh-users/zsh-autosuggestions.git
        dest: "{{ zsh_plugins_dir }}/zsh-autosuggestions"
        update: yes
      tags: zsh_plugins

    - name: Install zsh-syntax-highlighting plugin
      git:
        repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
        dest: "{{ zsh_plugins_dir }}/zsh-syntax-highlighting"
        update: yes
      tags: zsh_plugins

    - name: Install you-should-use plugin
      git:
        repo: https://github.com/MichaelAquilina/zsh-you-should-use.git
        dest: "{{ zsh_plugins_dir }}/you-should-use"
        update: yes
      tags: zsh_plugins

    - name: Configure .zshrc with required plugins
      lineinfile:
        path: "{{ ansible_env.HOME }}/.zshrc"
        regexp: '^plugins='
        line: "plugins=(git zsh-autosuggestions zsh-syntax-highlighting you-should-use sudo)"
        create: yes
        state: present
      tags: zshrc
      
    - name: Add batcat alias to .zshrc
      lineinfile:
        path: "{{ ansible_env.HOME }}/.zshrc"
        regexp: '^alias cat='
        line: 'alias cat="batcat"'
        insertafter: '^plugins=.*'
        create: yes
        state: present
      tags: zshrc



## NEOVIM

    - name: Download LazyVim starter config for Neovim
      git:
        repo: https://github.com/LazyVim/starter
        dest: "{{ ansible_env.HOME }}/.config/nvim"
        force: yes
      tags: nvim

    - name: Change ownership of nvim config
      file:
        path: "{{ ansible_env.HOME }}/.config/nvim"
        state: directory
        recurse: yes
        owner: "{{ ansible_user_id }}"
      tags: nvim


#### REGOLITH Configuration

    - name: Ensure Regolith Xresources directory exists
      file:
        path: "{{ ansible_env.HOME }}/.config/regolith3"
        state: directory
        mode: '0755'
        owner: "{{ ansible_env.USER }}"
        group: "{{ ansible_env.USER }}"

    - name: Set focused window border color and gaps in Xresources
      blockinfile:
        path: "{{ ansible_env.HOME }}/.config/regolith3/Xresources"
        block: |
          wm.border.focused.color: #800080
          wm.gaps.inner.size: 20
        create: yes
        owner: "{{ ansible_env.USER }}"
        group: "{{ ansible_env.USER }}"
        mode: '0644'

    # - name: Reload Regolith look to apply changes
    #   become: yes
    #   shell: regolith-look refresh
      # environment:
      #   DISPLAY: ":0"
      #   XDG_RUNTIME_DIR: "/run/user/{{ ansible_uid }}"
      # args:
      #   warn: false

    - name: Ensure Fail2Ban service is running
      systemd:
        name: fail2ban
        enabled: true
        state: started


### CONFIG DOCKER
    - name: Start and enable Docker service
      become: yes
      service:
        name: docker
        state: started
        enabled: yes

    - name: Add current user to docker group
      become: yes
      user:
        name: "{{ ansible_user | default('user') }}"
        groups: docker
        append: yes

    - name: Verify Docker installation
      command: docker run hello-world
      register: result
      changed_when: false